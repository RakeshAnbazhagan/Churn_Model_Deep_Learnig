# -*- coding: utf-8 -*-
"""Churn_Model_Deep Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T1vKzcK21R22NIdSUaXBPXQGEIHwFO9y
"""

!pip install tensorflow-gpu

import tensorflow as tf
print(tf.__version__)

#Basic Libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df=pd.read_csv('/content/Churn-Modelling.csv')

x=df.iloc[:,3:13]

y=df['Exited']

#Feature Engineering
geography=pd.get_dummies(x['Geography'],drop_first=True)
gender=pd.get_dummies(x['Gender'],drop_first=True)

X=x.drop(['Geography','Gender'],axis=1)

X=pd.concat([X,gender,geography],axis=1)

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=10)

#Feature Scaling
from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()

x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,LeakyReLU,PReLU,ELU,ReLU,Dropout

#Initializing ANN
classifier=Sequential()
#Adding Input Layer
classifier.add(Dense(units=11,activation='relu'))

#First hidden layer
classifier.add(Dense(units=7,activation='relu'))

#Second hidden layer
classifier.add(Dense(units=6,activation='relu'))

#Adding the outputlayer
classifier.add(Dense(1,activation='sigmoid'))

classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

#Early stopping
early_stopping=tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0.0001,
    patience=20,
    verbose=1,
    mode="auto",
    baseline=None,
    restore_best_weights=False,
    start_from_epoch=0,
)

model_history=classifier.fit(x_train,y_train,validation_split=0.3,batch_size=10,epochs=1000,callbacks=early_stopping)

model_history.history.keys()

#plotting the model
plt.plot(model_history.history['accuracy'])
plt.plot(model_history.history['val_accuracy'])
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.show()

plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.show()

#predicting
y_pred=classifier.predict(x_test)
y_pred=y_pred>=0.5

#Confusion_matrix and accuracy score
from sklearn.metrics import confusion_matrix,accuracy_score

cm=confusion_matrix(y_test,y_pred)
cm

score=accuracy_score(y_pred,y_test)

score

#weights
classifier.get_weights()

